     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  TREE
     8                                  global  BUSH
     9                                  global  FLOWER
    10                                  
    11                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  rand
    12                              <1> extern  strcmp
    13                              <1> extern  atoi
    14                              <1> extern  clock
    15                              <1> extern  CLOCKS_PER_SEC
    16                              <1> 
    17                              <1> extern  InContainer
    18                              <1> extern  InRndContainer
    19                              <1> extern  OutContainer
    20                              <1> extern  OutModifiedContainer
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; Вывод строки символов из буфера
    24                              <1> %macro	PrintStrBuf 2
    25                              <1>         mov rdi, %2
    26                              <1>         mov rsi, %1
    27                              <1>         xor rax, rax
    28                              <1>         call fprintf
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ;-------------------------------------------------------------
    32                              <1> ; Вывод строки, передаваемой непосредственно макросу
    33                              <1> %macro  PrintStr    2
    34                              <1>     section .data
    35                              <1>         %%arg1  db  %1,0        ; first argument
    36                              <1>     section .text               ; the printf arguments
    37                              <1>         mov rdi, %2
    38                              <1>         mov rsi, %%arg1
    39                              <1>         mov rax, 0              ; no floating point
    40                              <1>         call fprintf
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> ;-------------------------------------------------------------
    44                              <1> ; Вывод строки, передаваемой непосредственно макросу
    45                              <1> ; с переводом на следующую строку
    46                              <1> %macro  PrintStrLn    2
    47                              <1>     section .data
    48                              <1>         %%arg1  db  %1,10,0     ; first argument
    49                              <1>     section .text               ; the printf arguments
    50                              <1>         mov rdi, %2
    51                              <1>         mov rsi, %%arg1
    52                              <1>         mov rax, 0              ; no floating point
    53                              <1>         call fprintf
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> ;-------------------------------------------------------------
    57                              <1> ; Вывод целого числа
    58                              <1> %macro  PrintInt    2
    59                              <1>     section .data
    60                              <1>         %%arg1  db  "%d",0     ; first argument
    61                              <1>     section .text               ; the printf arguments
    62                              <1>         mov rdi, %2
    63                              <1>         mov rsi, %%arg1
    64                              <1>         mov rdx, %1
    65                              <1>         mov rax, 0              ; no floating point
    66                              <1>         call fprintf
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> ;-------------------------------------------------------------
    70                              <1> ; Вывод 64-разрядного беззнакового целого числа
    71                              <1> %macro  PrintLLUns    2
    72                              <1>     section .data
    73                              <1>         %%arg1  db  "%llu",0     ; first argument
    74                              <1>     section .text               ; the printf arguments
    75                              <1>         mov rdi, %2
    76                              <1>         mov rsi, %%arg1
    77                              <1>         mov rdx, %1
    78                              <1>         mov rax, 0              ; no floating point
    79                              <1>         call fprintf
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> ;-------------------------------------------------------------
    83                              <1> ; Вывод действительного числа двойной точности
    84                              <1> %macro  PrintDouble    2
    85                              <1>     section .data
    86                              <1>         %%arg1  db  "%g",0     ; first argument
    87                              <1>     section .text               ; the printf arguments
    88                              <1>         mov rdi, %2
    89                              <1>         mov rsi, %%arg1
    90                              <1>         movsd xmm0, %1
    91                              <1>         mov rax, 1              ; no floating point
    92                              <1>         call fprintf
    93                              <1> %endmacro
    94                              <1> 
    95                              <1> ;-------------------------------------------------------------
    96                              <1> ; Вывод содержимого контейнера
    97                              <1> %macro  PrintContainer    3
    98                              <1>     mov     rdi, %1
    99                              <1>     mov     esi, %2
   100                              <1>     mov     rdx, %3
   101                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   102                              <1>     call    OutContainer
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> ;-------------------------------------------------------------
   106                              <1> ; Вывод содержимого модифицированного контейнера
   107                              <1> %macro  PrintModifiedContainer    3
   108                              <1>     mov     rdi, %1
   109                              <1>     mov     esi, %2
   110                              <1>     mov     rdx, %3
   111                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   112                              <1>     call    OutModifiedContainer
   113                              <1> %endmacro
   114                              <1> 
   115                              <1> ; Открытие файла для чтения, записи
   116                              <1> %macro  FileOpen   3
   117                              <1>     section .data
   118                              <1>         %%rw  db  %2,0          ; признак доступа
   119                              <1>     section .text               ; the printf arguments
   120                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   121                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   122                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   123                              <1>         call    fopen
   124                              <1>         mov     [%3], rax
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> ;-------------------------------------------------------------
   128                              <1> ; Закрытие открытого файла
   129                              <1> %macro  FileClose   1
   130                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   131                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   132                              <1>     call    fclose
   133                              <1> %endmacro
   134                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    TREE        dd  1
    15 00000004 02000000                    BUSH        dd  2
    16 00000008 03000000                    FLOWER      dd  3
    17 0000000C 000000000000F03F            oneDouble   dq  1.0
    18 00000014 496E636F7272656374-         erMsg1      db "Incorrect number of arguments = %d: ",10,0
    18 0000001D 206E756D626572206F-
    18 00000026 6620617267756D656E-
    18 0000002F 7473203D2025643A20-
    18 00000038 0A00               
    19 0000003A 2D6E00                      rndGen      db "-n",0
    20 0000003D 2D6600                      fileGen     db "-f",0
    21 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    21 00000049 20636F6D6D616E6420-
    21 00000052 6C696E65210A202057-
    21 0000005B 61697465643A0A     
    22 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    22 0000006B 616E64202D6620696E-
    22 00000074 66696C65206F757466-
    22 0000007D 696C653031206F7574-
    22 00000086 66696C6530320A2020-
    22 0000008F 4F723A0A           
    23 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    23 0000009C 616E64202D6E206E75-
    23 000000A5 6D626572206F757466-
    23 000000AE 696C653031206F7574-
    23 000000B7 66696C6530320A00   
    24 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    24 000000C8 207175616C69666965-
    24 000000D1 722076616C7565210A-
    24 000000DA 20205761697465643A-
    24 000000E3 0A                 
    25 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    25 000000ED 616E64202D6620696E-
    25 000000F6 66696C65206F757466-
    25 000000FF 696C653031206F7574-
    25 00000108 66696C6530320A2020-
    25 00000111 4F723A0A           
    26 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    26 0000011E 616E64202D6E206E75-
    26 00000127 6D626572206F757466-
    26 00000130 696C653031206F7574-
    26 00000139 66696C6530320A00   
    27 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    28                                  section .bss
    29 00000000 <res 00000004>              argc        resd    1
    30 00000004 <res 00000004>              num         resd    1
    31 00000008 <res 00000008>              sum         resq    1
    32 00000010 <res 00000008>              start       resq    1       ; Начало отсчета времени
    33 00000018 <res 00000008>              delta       resq    1       ; Интервал отсчета времени
    34 00000020 <res 00000010>              startTime   resq    2       ; Начало отсчета времени
    35 00000030 <res 00000010>              endTime     resq    2       ; Конец отсчета времени
    36 00000040 <res 00000010>              deltaTime   resq    2       ; Интервал отсчета времени
    37 00000050 <res 00000008>              ifst        resq    1       ; Открываемый файл для чтения растений
    38 00000058 <res 00000008>              ofst1       resq    1       ; Открываемый файл для записи контейнера
    39 00000060 <res 00000008>              ofst2       resq    1       ; Открываемый файл для записи модифицированного контейнера
    40 00000068 <res 00046CD0>              cont        resb    290000  ; Массив используемый для хранения данных
    41                                  
    42                                  section .text
    43                                      global main
    44                                  main:
    45 00000000 4889E5                      mov rbp, rsp;
    46 00000003 55                      push rbp
    47 00000004 4889E5                  mov rbp,rsp
    48                                  
    49 00000007 893C25[00000000]            mov dword [argc], edi 
    50 0000000E 4989FC                      mov r12, rdi 
    51 00000011 4989F5                      mov r13, rsi
    52                                      
    53                                  .next1:
    54                                      PrintStrLn "Start", [stdout]
    54                              <1>  section .data
    54 00000145 53746172740A00      <1>  %%arg1 db %1,10,0
    54                              <1>  section .text
    54 00000014 488B3C25[00000000]  <1>  mov rdi, %2
    54 0000001C 48BE-               <1>  mov rsi, %%arg1
    54 0000001E [4501000000000000]  <1>
    54 00000026 B800000000          <1>  mov rax, 0
    54 0000002B E8(00000000)        <1>  call fprintf
    55 00000030 48BF-                       mov rdi, rndGen
    55 00000032 [3A00000000000000] 
    56 0000003A 498B7508                    mov rsi, [r13+8]    ; Второй аргумент командной строки
    57 0000003E E8(00000000)                call strcmp
    58 00000043 4883F800                    cmp rax, 0          ; Строки равны "-n"
    59 00000047 743C                        je .next2
    60 00000049 48BF-                       mov rdi, fileGen
    60 0000004B [3D00000000000000] 
    61 00000053 498B7508                    mov rsi, [r13+8]    ; Второй аргумент командной строки
    62 00000057 E8(00000000)                call strcmp
    63 0000005C 4883F800                    cmp rax, 0          ; Строки равны "-f"
    64 00000060 0F84C2000000                je .next3
    65                                      PrintStrBuf errMessage2, [stdout]
    65 00000066 488B3C25[00000000]  <1>  mov rdi, %2
    65 0000006E 48BE-               <1>  mov rsi, %1
    65 00000070 [BF00000000000000]  <1>
    65 00000078 4831C0              <1>  xor rax, rax
    65 0000007B E8(00000000)        <1>  call fprintf
    66 00000080 E976030000                  jmp .return
    67                                  .next2:
    68                                      ; Генерация случайных фигур
    69 00000085 498B7D10                    mov rdi, [r13+16]
    70 00000089 E8(00000000)                call atoi
    71 0000008E 890425[04000000]            mov [num], eax
    72                                      PrintInt [num], [stdout]
    72                              <1>  section .data
    72 0000014C 256400              <1>  %%arg1 db "%d",0
    72                              <1>  section .text
    72 00000095 488B3C25[00000000]  <1>  mov rdi, %2
    72 0000009D 48BE-               <1>  mov rsi, %%arg1
    72 0000009F [4C01000000000000]  <1>
    72 000000A7 488B1425[04000000]  <1>  mov rdx, %1
    72 000000AF B800000000          <1>  mov rax, 0
    72 000000B4 E8(00000000)        <1>  call fprintf
    73                                      PrintStrLn "", [stdout]
    73                              <1>  section .data
    73 0000014F 0A00                <1>  %%arg1 db %1,10,0
    73                              <1>  section .text
    73 000000B9 488B3C25[00000000]  <1>  mov rdi, %2
    73 000000C1 48BE-               <1>  mov rsi, %%arg1
    73 000000C3 [4F01000000000000]  <1>
    73 000000CB B800000000          <1>  mov rax, 0
    73 000000D0 E8(00000000)        <1>  call fprintf
    74 000000D5 8B0425[04000000]            mov eax, [num]
    75 000000DC 83F801                      cmp eax, 1
    76 000000DF 0F8CBA020000                jl .fall1
    77 000000E5 3D10270000                  cmp eax, 10000
    78 000000EA 0F8FAF020000                jg .fall1
    79                                      ; Начальная установка генератора случайных чисел
    80 000000F0 4831FF                      xor     rdi, rdi
    81 000000F3 4831C0                      xor     rax, rax
    82 000000F6 E8(00000000)                call    time
    83 000000FB 4889C7                      mov     rdi, rax
    84 000000FE 4831C0                      xor     rax, rax
    85 00000101 E8(00000000)                call    srand
    86                                      ; Заполнение контейнера случайными фигурами
    87 00000106 48BF-                       mov     rdi, cont
    87 00000108 [6800000000000000] 
    88 00000110 48BE-                       mov     rsi, len
    88 00000112 [4101000000000000] 
    89 0000011A 8B1425[04000000]            mov     edx, [num] 
    90 00000121 E8(00000000)                call    InRndContainer
    91 00000126 EB56                        jmp .task1
    92                                  
    93                                  .next3:
    94                                      ; Получение растений из файла
    95                                      FileOpen [r13+16], "r", ifst
    95                              <1>  section .data
    95 00000151 7200                <1>  %%rw db %2,0
    95                              <1>  section .text
    95 00000128 498B7D10            <1>  mov rdi, %1
    95 0000012C 48BE-               <1>  mov rsi, %%rw
    95 0000012E [5101000000000000]  <1>
    95 00000136 B800000000          <1>  mov rax, 0
    95 0000013B E8(00000000)        <1>  call fopen
    95 00000140 48890425[50000000]  <1>  mov [%3], rax
    96                                      ; Заполнение контейнера растениями из файла
    97 00000148 48BF-                       mov     rdi, cont           ; Адрес контейнера
    97 0000014A [6800000000000000] 
    98 00000152 48BE-                       mov     rsi, len            ; Адрес для установки числа элементов
    98 00000154 [4101000000000000] 
    99 0000015C 488B1425[50000000]          mov     rdx, [ifst]         ; Указатель на файл
   100 00000164 4831C0                      xor     rax, rax
   101 00000167 E8(00000000)                call    InContainer         ; Ввод данных в контейнер
   102                                      FileClose [ifst]
   102 0000016C 488B3C25[50000000]  <1>  mov rdi, %1
   102 00000174 B800000000          <1>  mov rax, 0
   102 00000179 E8(00000000)        <1>  call fclose
   103                                  
   104                                  .task1:
   105                                      ; Вычисление времени старта
   106 0000017E B8E4000000                  mov rax, 228  
   107 00000183 31FF                        xor edi, edi 
   108 00000185 488D3425[20000000]          lea rsi, [startTime]
   109 0000018D 0F05                        syscall 
   110                                      
   111                                      FileOpen [r13+24], "w", ofst1
   111                              <1>  section .data
   111 00000153 7700                <1>  %%rw db %2,0
   111                              <1>  section .text
   111 0000018F 498B7D18            <1>  mov rdi, %1
   111 00000193 48BE-               <1>  mov rsi, %%rw
   111 00000195 [5301000000000000]  <1>
   111 0000019D B800000000          <1>  mov rax, 0
   111 000001A2 E8(00000000)        <1>  call fopen
   111 000001A7 48890425[58000000]  <1>  mov [%3], rax
   112                                      PrintStrLn "Filled container:", [ofst1]
   112                              <1>  section .data
   112 00000155 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   112 0000015E 6E7461696E65723A0A- <1>
   112 00000167 00                  <1>
   112                              <1>  section .text
   112 000001AF 488B3C25[58000000]  <1>  mov rdi, %2
   112 000001B7 48BE-               <1>  mov rsi, %%arg1
   112 000001B9 [5501000000000000]  <1>
   112 000001C1 B800000000          <1>  mov rax, 0
   112 000001C6 E8(00000000)        <1>  call fprintf
   113                                      PrintContainer cont, [len], [ofst1]
   113 000001CB 48BF-               <1>  mov rdi, %1
   113 000001CD [6800000000000000]  <1>
   113 000001D5 8B3425[41010000]    <1>  mov esi, %2
   113 000001DC 488B1425[58000000]  <1>  mov rdx, %3
   113 000001E4 B800000000          <1>  mov rax, 0
   113 000001E9 E8(00000000)        <1>  call OutContainer
   114                                      FileClose [ofst1]
   114 000001EE 488B3C25[58000000]  <1>  mov rdi, %1
   114 000001F6 B800000000          <1>  mov rax, 0
   114 000001FB E8(00000000)        <1>  call fclose
   115                                      
   116                                  .task2:
   117                                      FileOpen [r13+32], "w", ofst2
   117                              <1>  section .data
   117 00000168 7700                <1>  %%rw db %2,0
   117                              <1>  section .text
   117 00000200 498B7D20            <1>  mov rdi, %1
   117 00000204 48BE-               <1>  mov rsi, %%rw
   117 00000206 [6801000000000000]  <1>
   117 0000020E B800000000          <1>  mov rax, 0
   117 00000213 E8(00000000)        <1>  call fopen
   117 00000218 48890425[60000000]  <1>  mov [%3], rax
   118                                      PrintStrLn "Modified container:", [ofst2]
   118                              <1>  section .data
   118 0000016A 4D6F64696669656420- <1>  %%arg1 db %1,10,0
   118 00000173 636F6E7461696E6572- <1>
   118 0000017C 3A0A00              <1>
   118                              <1>  section .text
   118 00000220 488B3C25[60000000]  <1>  mov rdi, %2
   118 00000228 48BE-               <1>  mov rsi, %%arg1
   118 0000022A [6A01000000000000]  <1>
   118 00000232 B800000000          <1>  mov rax, 0
   118 00000237 E8(00000000)        <1>  call fprintf
   119                                      PrintModifiedContainer cont, [len], [ofst2]
   119 0000023C 48BF-               <1>  mov rdi, %1
   119 0000023E [6800000000000000]  <1>
   119 00000246 8B3425[41010000]    <1>  mov esi, %2
   119 0000024D 488B1425[60000000]  <1>  mov rdx, %3
   119 00000255 B800000000          <1>  mov rax, 0
   119 0000025A E8(00000000)        <1>  call OutModifiedContainer
   120                                      FileClose [ofst2]
   120 0000025F 488B3C25[60000000]  <1>  mov rdi, %1
   120 00000267 B800000000          <1>  mov rax, 0
   120 0000026C E8(00000000)        <1>  call fclose
   121                                  
   122                                      ; Вычисление времени завершения
   123 00000271 B8E4000000                  mov rax, 228
   124 00000276 31FF                        xor edi, edi 
   125 00000278 488D3425[30000000]          lea rsi, [endTime]
   126 00000280 0F05                        syscall
   127                                  
   128                                      ; Получение времени работы
   129 00000282 488B0425[30000000]          mov rax, [endTime]
   130 0000028A 482B0425[20000000]          sub rax, [startTime]
   131 00000292 488B1C25[38000000]          mov rbx, [endTime+8]
   132 0000029A 488B0C25[28000000]          mov rcx, [startTime+8]
   133 000002A2 4839CB                      cmp rbx, rcx
   134 000002A5 7D0A                        jge .subNanoOnly
   135                                      
   136 000002A7 48FFC8                      dec rax
   137 000002AA 4881C300CA9A3B              add rbx, 1000000000
   138                                  .subNanoOnly:
   139 000002B1 482B1C25[28000000]          sub rbx, [startTime+8]
   140 000002B9 48890425[40000000]          mov [deltaTime], rax
   141 000002C1 48891C25[48000000]          mov [deltaTime+8], rbx
   142                                  
   143                                      PrintStr "Calculaton time = ", [stdout]
   143                              <1>  section .data
   143 0000017F 43616C63756C61746F- <1>  %%arg1 db %1,0
   143 00000188 6E2074696D65203D20- <1>
   143 00000191 00                  <1>
   143                              <1>  section .text
   143 000002C9 488B3C25[00000000]  <1>  mov rdi, %2
   143 000002D1 48BE-               <1>  mov rsi, %%arg1
   143 000002D3 [7F01000000000000]  <1>
   143 000002DB B800000000          <1>  mov rax, 0
   143 000002E0 E8(00000000)        <1>  call fprintf
   144                                      PrintLLUns [deltaTime], [stdout]
   144                              <1>  section .data
   144 00000192 256C6C7500          <1>  %%arg1 db "%llu",0
   144                              <1>  section .text
   144 000002E5 488B3C25[00000000]  <1>  mov rdi, %2
   144 000002ED 48BE-               <1>  mov rsi, %%arg1
   144 000002EF [9201000000000000]  <1>
   144 000002F7 488B1425[40000000]  <1>  mov rdx, %1
   144 000002FF B800000000          <1>  mov rax, 0
   144 00000304 E8(00000000)        <1>  call fprintf
   145                                      PrintStr " sec, ", [stdout]
   145                              <1>  section .data
   145 00000197 207365632C2000      <1>  %%arg1 db %1,0
   145                              <1>  section .text
   145 00000309 488B3C25[00000000]  <1>  mov rdi, %2
   145 00000311 48BE-               <1>  mov rsi, %%arg1
   145 00000313 [9701000000000000]  <1>
   145 0000031B B800000000          <1>  mov rax, 0
   145 00000320 E8(00000000)        <1>  call fprintf
   146                                      PrintLLUns [deltaTime+8], [stdout]
   146                              <1>  section .data
   146 0000019E 256C6C7500          <1>  %%arg1 db "%llu",0
   146                              <1>  section .text
   146 00000325 488B3C25[00000000]  <1>  mov rdi, %2
   146 0000032D 48BE-               <1>  mov rsi, %%arg1
   146 0000032F [9E01000000000000]  <1>
   146 00000337 488B1425[48000000]  <1>  mov rdx, %1
   146 0000033F B800000000          <1>  mov rax, 0
   146 00000344 E8(00000000)        <1>  call fprintf
   147                                      PrintStr " nsec", [stdout]
   147                              <1>  section .data
   147 000001A3 206E73656300        <1>  %%arg1 db %1,0
   147                              <1>  section .text
   147 00000349 488B3C25[00000000]  <1>  mov rdi, %2
   147 00000351 48BE-               <1>  mov rsi, %%arg1
   147 00000353 [A301000000000000]  <1>
   147 0000035B B800000000          <1>  mov rax, 0
   147 00000360 E8(00000000)        <1>  call fprintf
   148                                      PrintStr 10, [stdout]
   148                              <1>  section .data
   148 000001A9 0A00                <1>  %%arg1 db %1,0
   148                              <1>  section .text
   148 00000365 488B3C25[00000000]  <1>  mov rdi, %2
   148 0000036D 48BE-               <1>  mov rsi, %%arg1
   148 0000036F [A901000000000000]  <1>
   148 00000377 B800000000          <1>  mov rax, 0
   148 0000037C E8(00000000)        <1>  call fprintf
   149                                  
   150                                      PrintStrLn "Stop", [stdout]
   150                              <1>  section .data
   150 000001AB 53746F700A00        <1>  %%arg1 db %1,10,0
   150                              <1>  section .text
   150 00000381 488B3C25[00000000]  <1>  mov rdi, %2
   150 00000389 48BE-               <1>  mov rsi, %%arg1
   150 0000038B [AB01000000000000]  <1>
   150 00000393 B800000000          <1>  mov rax, 0
   150 00000398 E8(00000000)        <1>  call fprintf
   151 0000039D EB5C                        jmp .return
   152                                  .fall1:
   153                                      PrintStr "incorrect numer of plants = ", [stdout]
   153                              <1>  section .data
   153 000001B1 696E636F7272656374- <1>  %%arg1 db %1,0
   153 000001BA 206E756D6572206F66- <1>
   153 000001C3 20706C616E7473203D- <1>
   153 000001CC 2000                <1>
   153                              <1>  section .text
   153 0000039F 488B3C25[00000000]  <1>  mov rdi, %2
   153 000003A7 48BE-               <1>  mov rsi, %%arg1
   153 000003A9 [B101000000000000]  <1>
   153 000003B1 B800000000          <1>  mov rax, 0
   153 000003B6 E8(00000000)        <1>  call fprintf
   154                                      PrintInt [num], [stdout]
   154                              <1>  section .data
   154 000001CE 256400              <1>  %%arg1 db "%d",0
   154                              <1>  section .text
   154 000003BB 488B3C25[00000000]  <1>  mov rdi, %2
   154 000003C3 48BE-               <1>  mov rsi, %%arg1
   154 000003C5 [CE01000000000000]  <1>
   154 000003CD 488B1425[04000000]  <1>  mov rdx, %1
   154 000003D5 B800000000          <1>  mov rax, 0
   154 000003DA E8(00000000)        <1>  call fprintf
   155                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   155                              <1>  section .data
   155 000001D1 2E205365742030203C- <1>  %%arg1 db %1,10,0
   155 000001DA 206E756D626572203C- <1>
   155 000001E3 3D2031303030300A00  <1>
   155                              <1>  section .text
   155 000003DF 488B3C25[00000000]  <1>  mov rdi, %2
   155 000003E7 48BE-               <1>  mov rsi, %%arg1
   155 000003E9 [D101000000000000]  <1>
   155 000003F1 B800000000          <1>  mov rax, 0
   155 000003F6 E8(00000000)        <1>  call fprintf
   156                                  .return:
   157 000003FB C9                      leave
   158 000003FC C3                      ret
